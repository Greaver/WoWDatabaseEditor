<controls:DialogViewBase xmlns="https://github.com/avaloniaui"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                xmlns:controls="clr-namespace:WDE.Common.Avalonia.Controls;assembly=WDE.Common.Avalonia"
                xmlns:converters="clr-namespace:WDE.Common.Avalonia.Converters;assembly=WDE.Common.Avalonia"
                xmlns:views="clr-namespace:WDE.Conditions.Avalonia.Views"
                xmlns:dnD="clr-namespace:WDE.Common.Avalonia.DnD;assembly=WDE.Common.Avalonia"
                xmlns:themes="clr-namespace:WDE.Common.Avalonia.Themes;assembly=WDE.Common.Avalonia"
                xmlns:avalonia="clr-namespace:WDE.Common.Avalonia;assembly=WDE.Common.Avalonia"
                xmlns:controls1="clr-namespace:AvaloniaStyles.Controls;assembly=AvaloniaStyles"
                mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
                Name="Root"
                x:Class="WDE.Conditions.Avalonia.Views.ConditionsEditorView">
    <controls:DialogViewBase.Styles>
        <StyleInclude Source="avares://WDE.Conditions.Avalonia/Views/LabeledControl.axaml"></StyleInclude>
        <Style Selector="views|LabeledControl">
            <Setter Property="Margin" Value="0,0,0,2" />
        </Style>
    </controls:DialogViewBase.Styles>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="5" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="60" />
        </Grid.RowDefinitions>
        <ListBox Grid.Row="1" VirtualizationMode="None" dnD:DragAndDrop.IsDropTarget="True" dnD:DragAndDrop.DropHandler="{Binding }" dnD:DragAndDrop.IsDragSource="True" Items="{Binding Conditions, Mode=OneTime}" SelectedItem="{Binding SelectedCondition}">
            <ListBox.KeyBindings>
                <KeyBinding Command="{Binding RemoveItemCommand}" Gesture="Delete" />
                <KeyBinding Command="{Binding RemoveItemCommand}" Gesture="Back" />
                
                <KeyBinding Command="{Binding UndoCommand}" Gesture="{x:Static avalonia:KeyGestures.Undo}" />
                <KeyBinding Command="{Binding RedoCommand}" Gesture="{x:Static avalonia:KeyGestures.Redo}" />
                
                <KeyBinding Command="{Binding CopyCommand}" Gesture="{x:Static avalonia:KeyGestures.Copy}" />
                <KeyBinding Command="{Binding PasteCommand}" Gesture="{x:Static avalonia:KeyGestures.Paste}" />
                <KeyBinding Command="{Binding CutCommand}" Gesture="{x:Static avalonia:KeyGestures.Cut}" />
            </ListBox.KeyBindings>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel>
                        <controls:FormattedTextBlock IsHitTestVisible="False" Text="{Binding Readable}" />
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <GridSplitter Grid.Row="2" />
        <Border Padding="10" Grid.Row="3"
                IsVisible="{Binding SelectedCondition, Converter={x:Static converters:CommonConverters.InversedNullToBoolConverter}}"
                ClipToBounds="True">
            <StackPanel 
                DataContext="{Binding SelectedCondition}">
                <controls1:CompletionComboBox SelectedItem="{Binding #Root.DataContext.SelectedConditionsType}"
                                              Items="{Binding #Root.DataContext.ConditionTypes, Mode=OneTime}"
                                              HorizontalAlignment="Stretch">
                    <controls1:CompletionComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding NameReadable}" />
                        </DataTemplate>
                    </controls1:CompletionComboBox.ItemTemplate>
                </controls1:CompletionComboBox>
                <views:LabeledControl Header="{Binding Name}" DataContext="{Binding Invert, Mode=OneWay}">
                    <controls:ParameterValueHolderView PickCommand="{Binding #Root.DataContext.PickCommand}" />
                </views:LabeledControl>
                <views:LabeledControl Header="{Binding Name}" IsVisible="{Binding IsUsed}" DataContext="{Binding ConditionTarget, Mode=OneWay}">
                    <controls:ParameterValueHolderView PickCommand="{Binding #Root.DataContext.PickCommand}" />
                </views:LabeledControl>
                <views:LabeledControl Header="{Binding Name}" IsVisible="{Binding IsUsed}" DataContext="{Binding ConditionValue1, Mode=OneWay}">
                    <controls:ParameterValueHolderView PickCommand="{Binding #Root.DataContext.PickCommand}" />
                </views:LabeledControl>
                <views:LabeledControl Header="{Binding Name}" IsVisible="{Binding IsUsed}" DataContext="{Binding ConditionValue2, Mode=OneWay}">
                    <controls:ParameterValueHolderView PickCommand="{Binding #Root.DataContext.PickCommand}" />
                </views:LabeledControl>
                <views:LabeledControl Header="{Binding Name}" IsVisible="{Binding IsUsed}" DataContext="{Binding ConditionValue3, Mode=OneWay}">
                    <controls:ParameterValueHolderView PickCommand="{Binding #Root.DataContext.PickCommand}" />
                </views:LabeledControl>
            </StackPanel>
        </Border>
        
        <Border Padding="10" Grid.Row="4">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="150" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="150" />
                </Grid.ColumnDefinitions>
                <Button Command="{Binding Cancel}">Cancel</Button>
                <Button Grid.Column="2" Command="{Binding Accept}">Ok</Button>
            </Grid>
        </Border>
    </Grid>
</controls:DialogViewBase>
